{
  "definitions": {
    "data_type": {
      "title": "data_type",
      "patternProperties": {
        "^([^./]+)$": {
          "$ref": "#/definitions/data_type"
        }
      },
      "additionalProperties": false
    },
    "projection": {
      "description": "Where to get the data from",
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "linked",
            "calculated",
            "static"
          ],
          "description": "linked: a value linked from the data set, calculated: a value that requires calculation, static:  a value defined here in the projection "
        },
        "stream": {
          "type": "string"
        },
        "location": {
          "enum": [
            "start",
            "event",
            "configuration"
          ],
          "description": "start comes from metadata fields in the start document, event comes from event, configuration comes from configuration fields in the event_descriptor document"
        },
        "field": {
          "type": "string"
        },
        "config_index": {
          "type": "integer"
        },
        "config_device": {
          "type": "string"
        },
        "calculation": {
          "title": "calculation properties",
          "description": "required fields if type is calculated",
          "properties": {
            "callable": {
              "type": "string",
              "description": "callable function to perform calculation"
            },
            "args": {
              "type": "array",
              "decription": "args for calculation callable"
            },
            "kwargs": {
              "type": "object",
              "description": "kwargs for calcalation callable"
            }
          },
          "required": [
            "callable"
          ]
        },
        "value": {
          "description": "value explicitely defined in the projection when type==static."
        }
      },
      "allOf": [
        {
          "if": {
            "allOf": [
              {
                "properties": {
                  "location": {
                    "enum": "configuration"
                  }
                }
              },
              {
                "properties": {
                  "type": {
                    "enum": "linked"
                  }
                }
              }
            ]
          },
          "then": {
            "required": [
              "type",
              "location",
              "config_index",
              "config_device",
              "field",
              "stream"
            ]
          }
        },
        {
          "if": {
            "allOf": [
              {
                "properties": {
                  "location": {
                    "enum": "event"
                  }
                }
              },
              {
                "properties": {
                  "type": {
                    "enum": "linked"
                  }
                }
              }
            ]
          },
          "then": {
            "required": [
              "type",
              "location",
              "field",
              "stream"
            ]
          }
        },
        {
          "if": {
            "allOf": [
              {
                "properties": {
                  "location": {
                    "enum": "event"
                  }
                }
              },
              {
                "properties": {
                  "type": {
                    "enum": "calculated"
                  }
                }
              }
            ]
          },
          "then": {
            "required": [
              "type",
              "field",
              "stream",
              "calculation"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "enum": "static"
              }
            }
          },
          "then": {
            "required": [
              "type",
              "value"
            ]
          }
        }
      ],
      "additionalProperties": false
    },
    "projections": {
      "title": "Describe how to interperet this run as the given projection",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the projection"
        },
        "version": {
          "type": "string",
          "description": "The version of the projection spec. Can specify the version of an external specification."
        },
        "configuration": {
          "type": "object",
          "description": "Static information about projection"
        },
        "projection": {
          "type": "object",
          "patternProperties": {
            ".": {
              "$ref": "#/definitions/projection"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "required": [
        "projection",
        "version",
        "configuration"
      ]
    }
  },
  "properties": {
    "project": {
      "type": "string",
      "description": "Name of project that this run is part of"
    },
    "sample": {
      "type": [
        "object",
        "string"
      ],
      "description": "Information about the sample, may be a UID to another collection"
    },
    "scan_id": {
      "type": "integer",
      "description": "Scan ID number, not globally unique"
    },
    "time": {
      "type": "number",
      "description": "Time the run started.  Unix epoch time"
    },
    "uid": {
      "type": "string",
      "description": "Globally unique ID for this run"
    },
    "group": {
      "type": "string",
      "description": "Unix group to associate this data with"
    },
    "owner": {
      "type": "string",
      "description": "Unix owner to associate this data with"
    },
    "projections": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/projections"
      }
    },
    "dark_frame": {
      "type": "boolean",
      "description": "if true, the run contains the dark frame image"
    },
    "is_calibration": {
      "type": "boolean",
      "description": "if true, the run contains the image of the standard material for calibration"
    },
    "sc_dk_field_uid": {
      "type": "string",
      "description": "the uid of the run that contains the dark frame image"
    },
    "calibration_md": {
      "type": "object",
      "description": "the metadata of experiment setup being used in the azimuthal integration of image",
      "properties": {
        "detector": {
          "type": "string",
          "description": "the name of the detector, one of the types defined in pyFAI"
        },
        "pixel1": {
          "type": "number",
          "description": "the horizontal pixel length in meter"
        },
        "pixel2": {
          "type": "number",
          "description": "the vertical pixel length in meter"
        },
        "max_shape": {
          "type": "array",
          "description": "the numbers of horizontal and vertical pixels",
          "items": {
            "type": "integer"
          }
        },
        "dist": {
          "type": "number",
          "description": "the distance between the sample and the beam center on the detector in meter"
        },
        "distance": {
          "type": "number",
          "description": "an analog to 'dist'"
        },
        "poni1": {
          "type": "number",
          "description": "the horizontal coordinate of the beam center in meter"
        },
        "poni2": {
          "type": "number",
          "description": "the vertical coordinate of the beam center in meter"
        },
        "rot1": {
          "type": "number",
          "description": "the first Euler angle from sample ref to detector ref in radian"
        },
        "rot2": {
          "type": "number",
          "description": "the second Euler angle from sample ref to detector ref in radian"
        },
        "rot3": {
          "type": "number",
          "description": "the third Euler angle from sample ref to detector ref in radian"
        },
        "wavelength": {
          "type": "number",
          "description": "the wavelength of the ray in meter"
        },
        "pixelX": {
          "type": "number",
          "description": "the horizontal length of the pixel in micron"
        },
        "pixelY": {
          "type": "number",
          "description": "the vertical length of the pixel in micron"
        }
      }
    },
    "sample_composition": {
      "oneOf": [
        {
          "type": "string",
          "description": "the chemical formula, e. g. TiO2"
        },
        {
          "type": "object",
          "description": "the dictionary of elements, e. g. {'Ti': 1, 'O': 2}"
        }
      ]
    },
    "bt_wavelength": {
      "type": "number",
      "description": "the wavelength of the beam during the beam time"
    },
    "sample_name": {
      "type": "string",
      "description": "the name of the sample measured in this run"
    },
    "detector": {
      "type": "string",
      "description": "the name of the detector, one of the types defined in pyFAI"
    },
    "hints": {
      "type": "object",
      "description": "Start-level hints",
      "properties": {
        "dimensions": {
          "type": "array",
          "description": "The independent axes of the experiment.  Ordered slow to fast",
          "items": {
            "type": "array",
            "description": "Each entry in this list is of the from ([<FIELD>, ...], <STREAM>).  A 1d scan will have 1 such entry, a scan with 3 independent entries would have 3",
            "items": [
              {
                "type": "array",
                "description": "The data key(s) for the given dimension.",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string",
                "description": "The stream to find the datakeys in."
              }
            ],
            "additionalItems": false,
            "minItems": 2
          }
        }
      },
      "patternProperties": {
        "^([^.]+)$": {
          "$ref": "#/definitions/data_type"
        }
      },
      "additionalProperties": false
    }
  },
  "patternProperties": {
    "^([^./]+)$": {
      "$ref": "#/definitions/data_type"
    }
  },
  "additionalProperties": false,
  "required": [
    "uid",
    "time"
  ],
  "type": "object",
  "description": "Document created at the start of run.  Provides a seach target and later documents link to it"
}
