"""The tools to read, write, audit, transform, wash the data."""
import pickle
from pathlib import Path
from typing import Callable
from typing import Dict, Any
from typing import Generator

import yaml
from bson.binary import Binary
from numpy import ndarray


def load_poni(poni_file: str) -> dict:
    """Turn the poni file to pyFAI readable dictionary."""
    with Path(poni_file).open('r') as f:
        geometry = yaml.safe_load(f)
    return lower_key(geometry)


def lower_key(dct: Dict[str, Any]) -> Dict[str, Any]:
    """Return dictionary with all keys in lower case."""
    return {key.lower(): value for key, value in dct.items()}


def dump_ndarray(arr: ndarray):
    """Pickle dump the numpy array to Binary format."""
    return Binary(pickle.dumps(arr, protocol=2))


def load_binary(binary: Binary):
    """Pickle load the Binary format data."""
    return pickle.loads(binary)


def paths(dct: Any, path=()) -> Generator:
    """Yield paths to the leafs of a nested dictionary."""
    if isinstance(dct, dict):
        for key, value in dct.items():
            yield from paths(value, path + (key,))
    elif isinstance(dct, (tuple, list)):
        for ind, elem in enumerate(dct):
            yield from paths(elem, path + (ind,))
    else:
        yield path + (dct,)


def iter_dct(dct: dict, operation: Callable):
    """Recursively iterate the dictionary and operate on the leaf nodes. Return the processed dictionary."""
    dct2 = dict()
    for key, value in dct.items():
        if isinstance(value, dict):
            dct2[key] = iter_dct(value, operation)
        else:
            dct2[key] = operation(value)
    return dct2


def from_db(dct: dict):
    """Wash the data in the dictionary loaded from mongodb so that they can be in correct format."""

    def wash(item):
        return load_binary(item) if isinstance(item, Binary) else item

    return iter_dct(dct, wash)


def to_db(dct: dict):
    """Wash the data that will go to mongodb so that they can be in correct format."""

    def wash(item):
        return dump_ndarray(item) if isinstance(item, ndarray) else item

    return iter_dct(dct, wash)


def load_data(filename, minrows=10, **kwargs):
    """Find and load data from a text file.

    The data reading starts at the first matrix block of at least minrows rows
    and constant number of columns.  This seems to work for most of the
    datafiles including those generated by PDFGetX2.

    filename -- name of the file we want to load data from.
    minrows  -- minimum number of rows in the first data block.
                All rows must have the same number of floating point values.
    usecols  -- zero-based index of columns to be loaded, by default use
                all detected columns.  The reading skips data blocks that
                do not have the usecols-specified columns.
    unpack   -- return data as a sequence of columns that allows tuple
                unpacking such as  x, y = loadData(FILENAME, unpack=True).
                Note transposing the loaded array as loadData(FILENAME).T
                has the same effect.
    kwargs   -- keyword arguments that are passed to numpy.loadtxt

    Return a numpy array of the data.
    See also numpy.loadtxt for more details.
    """
    from numpy import array, loadtxt
    # determine the arguments
    delimiter = kwargs.get('delimiter')
    usecols = kwargs.get('usecols')
    # required at least one column of floating point values
    mincv = (1, 1)
    # but if usecols is specified, require sufficient number of columns
    # where the used columns contain floats
    if usecols is not None:
        hiidx = max(-min(usecols), max(usecols) + 1)
        mincv = (hiidx, len(set(usecols)))

    # Check if a line consists of floats only and return their count
    # Return zero if some strings cannot be converted.

    def countcolumnsvalues(line):
        try:
            words = line.split(delimiter)
            # remove trailing blank columns
            while words and not words[-1].strip():
                words.pop(-1)
            nc = len(words)
            if usecols is not None:
                nv = len([float(words[i]) for i in usecols])
            else:
                nv = len([float(w) for w in words])
        except (IndexError, ValueError):
            nc = nv = 0
        return nc, nv

    # make sure fid gets cleaned up
    with open(filename, 'rb') as fid:
        # search for the start of datablock
        start = ncvblock = None
        fpos = (0, 0)
        nrows = 0
        for line in fid:
            fpos = (fpos[1], fpos[1] + len(line))
            line = line.decode()
            ncv = countcolumnsvalues(line)
            if ncv < mincv:
                start = None
                continue
            # ncv is acceptable here, require the same number of columns
            # throughout the datablock
            if start is None or ncv != ncvblock:
                ncvblock = ncv
                nrows = 0
                start = fpos[0]
            nrows += 1
            # block was found here!
            if nrows >= minrows:
                break
        # Return an empty array when no data found.
        # loadtxt would otherwise raise an exception on loading from EOF.
        if start is None:
            rv = array([], dtype=float)
        else:
            fid.seek(start)
            # always use usecols argument so that loadtxt does not crash
            # in case of trailing delimiters.
            kwargs.setdefault('usecols', list(range(ncvblock[0])))
            rv = loadtxt(fid, **kwargs)
    return rv


def to_dict(obj: object, exclude: Callable[[str], bool] = None) -> dict:
    """Convert an object to a dictionary by keeping import attribute information."""

    def pdfconfig_exclude(attr: str) -> bool:
        """Whether to exclude an attribute in pdfconfig."""
        if attr.startswith("_"):
            return True
        if attr in ("inputfiles", "output", "interact"):
            return True
        return False

    dct = {}
    if exclude is None:
        exclude = pdfconfig_exclude
    for attr_key, attr_val in obj.__dict__.items():
        if not exclude(attr_key):
            dct[attr_key] = attr_val
    return dct
